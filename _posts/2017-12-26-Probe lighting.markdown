---
layout:     post
title:      "Probe Lighting"
subtitle:   " \"光照探针\""
date:       2017-12-25 12:00:00
author:     "Wei"
header-img: "img/post-bg-2017.jpg"
catalog: true
tags:
    - 翻译
---


## 光照探针
在了解到我们场景中图表的数量对于预计算时间有害的情况下，通过从预计算中选择排除某些对象，我们可以有一个很大的光照性能的提高。这样将会减少图表的生成。代替它的是，我们可以使用光照探针在这些对象上，这是很有效的手段去接收场景中的间接光照。虽然探针点亮这些对象不会对场景产生反射光源，通常这是没有什么显著的影响的。光照探针最适合趋向于更小的对象，它们对于反射照明会有很少的影响。

### 什么是光照探针

光照探针是一种快速提高用来模拟实时渲染应用如游戏中的照明的技术。它通常用来处理游戏世界中的角色和其他非静态的物体的照明。探头照明是非常好的性能在实时运行的时候并且具有非常快的预计算。

光照探针的工作原理是通过在3D空间中在某个特定的点中采样入射光线并且编码这些信息在球体上通过使用被称为球谐函数的数学函数。这些系数有非常低的存储消耗并且可以被很快的解压在游戏的时候并且由场景中的着色器使用近似表面照明。在Unity 中，这样的功能由Light Probes 所提供。

这里有很多限制在使用探头照明的时候。其中一个限制是它是很困难的去代表高频率的或者有斑纹的灯光在这个球面范围里，在不增加探针数量（大小）的情况下。不幸的是，随着精度的提高，消耗也会快速增加，这意味着为了性能的原因我们不得不使用低阶球谐函数。

事实上我们在世界上仅仅有一个球面表示一个3D位置的灯光，这使得探头照明不适合这些巨大的物体里面有被期望的变化非常大的灯光。另一个限制是-当球谐函数编码在球体上时，他们通常是不合适的对于巨大的二维物体或者他们带着有明显的凹面的物体。如果你考虑到巨大的对象需要使用探头照明，可以参考到Unity 手册提供了一些关于Light Probe Proxy Volumes（LPPV）的信息。

尽管有这些限制，探头照明也会有很合适的令人信服的结果使用相对低的消耗，当在使用合适的小的凸面的对象的时候。在后面的教程中我们将更深入的探索探头照明的设置和布置，但是限制，我们只需要理解我们可以减少光照贴图图表的数量在我们的场景中通过适当的代替选择使用探头照明。

### 为对象设置光照探针

尽管它是明显地有用的设置我们的物体在环境队列之下为Static，用来实现我们的灯光设置在进行中，但是这里有许多对象在父层级下将会是探头照明替代的很好的候选人。清除这些对象的Static意味着他们不再被认为是Unity预计算的实时GI系统并且因此光照贴图图表的数量将会被减少。记住在我们的场景中减少图表的数量是一个很好的办法去提高预计算的时间。

<img class="shadow" src="/img/20171226/probe_lighting1.png" />
<small class="img-hint">小的，凸面的碎片对象是完美的案例对于探头照明</small>

观察Unity 编辑器的层次界面，让我们检查一下Environment 对象的子物体。如果我们特别的看一下我们地下能找到探针的对象，我们可以发现他们都是很小的碎片风格的对象并且是场景中的衣服比如石头，水桶和木板。这些对象都是非常多的，并且相对的小的对象有些是复杂的。得到不失真的光照贴图的UV很有可能导致大量的UV外壳。更多的UV外壳会产生额外的图表，更多的图表意味着更多的光照贴图纹素去计算等。

被给的对象是如此的小，以至于他们在场景中不能提供更多的间接光照。相同地，他们的大小意味着这里有很少的表面区域可以显示详细的灯光变化。这使得这些对象是光照探针的很好的候选人。

不仅我们的预计算时间会有好处，而且在运行的时候性能也会被改善，由于我们需要存储在内存中的光照贴图数量的减少并且我们在shader中编码。

    --在层级窗口中选择探针对象。
    --在检查器面板中，不要勾选Static复选框。
    --选择是，当出现提示的时候改变子物体

此时此刻，如果我们给预计算足够长的时间，我们将会最终看到我们光照的结果在场景的视图中。我们大概注意到我们探测光源，非静态的物体和围绕他们周围的物体是不同的并且没有匹配场景中的灯光。这是因为我们还没有设置我们的光照探针并且因此他们返回的是场景的环境探针。环境探针本质上是包含在场景中的一个隐藏的探针，对于用户是不可见的，它在Lighting窗口的环境源设置被采集。

<img class="shadow" src="/img/20171226/probe_lighting2.png" />
<small class="img-hint">图片展示了没有设置光照探针，不是静态的物体是怎么样看上去是不合适的在他们的场景中。</small>

为了设置我们静态的物体更加令人信服的在他们周围的环境中，我们需要花费一些时间去放置我们的光照探头在场景中，为了采集通过世界中的间接光源。

##放置场景中的光照探头

不是静态的物体接受的光照基于附近的探头。关于哪个探针被读取是由被光照探头之间的空间划分成四面体的空间所决定，并且检测给定物体的四面体。为了制止这些四面体，探头之间必须被放置在3D空间中有体积感。

<img class="shadow" src="/img/20171226/probe_lighting3.png" />
<small class="img-hint">场景展示看光照探针的布置，直观的在编辑器里就像点亮的球体一样。</small>

探头照明是相对的不昂贵的在运行的时候并且是很快的对于预计算，然而，做大限度的增加性能，放置探头的时候需要小心。虽然设置简单，但是稠密的网格的光照探针的安排可能是很浪费的由于大量的探针并没有采集到不同的变化在本地的光照条件下。为了使它更有效的，一个更好实践设置好的强度的探针在这些有显著灯光变化的区域里。举个例子，这可能包含的区域是这里有一些过渡从灯光到阴影，或者可能是强光反射的区域。

    --设置光照探针，创建一个Light Probe Group 对象在GameObject 菜单中(GameObject>Light>Light Probe Group)
    --现在我们开始设置我们的探针，选择被场景的Light Probe Group 在层级界面上。
    --在检查器界面上，选择Edit Light Probes 从Light Probe Group 组件上。
    --你可以选择探针在场景界面中，从创建的立方体布置中删除所有的但是留一个默认的角落的探针。
    --放置好剩下的探针在环境中的地形上并且复制它通过Ctrl + D （Mac上是Cmd + D）
    --使用移动工具（W）。移动第二个探针Y轴方向向上，距离第一个探针2米的距离。
    --继续复制一个探针并且移动这个复制体更高，大约5米在Y轴方向上。

<img class="shadow" src="/img/20171226/probe_lighting4.png" />
<small class="img-hint">Edit Probes 按钮在Light Probe Group 组件里。</small>

创建一个垂直的布置的原因是我们可以采集间接反射光源从地面上，从头部高度上到天空上（物体离开地面是可行的）。当我们围绕着场景去复制我们的光照探头，为了创建我们的四面体可以确保在任何可游戏的区域包含在一个由探针之间创建的四面体中。这些体积是可见的通过品红色的线条在探针之间。

<img class="shadow" src="/img/20171226/probe_lighting5.png" />
<small class="img-hint">图片展示了光照探针的位置和他们位置之间形成的四面体。</small>

    --通过按住Shift选择你创建的3个探针并且单独的点击每个探针或者通过拖拽一个选区。
    --复制我们创建的整个垂直的链条并且移动他们到场景中附近的光照感兴趣的区域中。

当要决定什么是光照感兴趣的区域，寻找阴影区域，或者地形材质中有很大颜色变化的区域。记住我们的目标是在整个场景中采样间接的和反射的光源。为了合理的增加一个新的探针的花费，我们必须确保采集显而易见的灯光变化。如果我们使用我们的光照探针去三级一些很平常的或者相同的灯光变化的区域，我们不太可能看到很大的变化通过这些探针接受的对象。就像很多优秀优化的方面，我们得确保每一个我们场景中的对象都提供很好的效益。

    --继续重复这些步骤，放置这些探针在光照密度更大变化的区域，直到你创建了一个稀疏牢笼的封闭的可玩的区域。
    --当放置我们的探针时，记住勾选最底下的光照探针保持离开地面的。

在我们的例子中LightTutorialOptimal 场景中我们创建了2个光照探针队列：一个是人口密集的村庄区域叫做VillageLightProbeGroup，另一个是稀疏的外面的村庄不可玩的区域叫做ExtentsLightProbeGroup。第二个队列覆盖了游戏世界中的所有范围为了防止任何非静态的网格渲染对象离开游戏区域。我们不需要相同精度的去表示这些场景中不可达的区域因此这个队列可以使用很少的密度。2个探针在垂直轴上就足够了。

将光照探针的队列分离成2个GameObjects 可以更轻松的设置这些探针。每个独立的光照探针租可以被可用的或者不可用的可以提供一个更清晰的视角在场景中工作的时候。这些队列在运行的时候会被自动的组合，并删除任何重叠的探针。

为了看到光照探针点亮他们的场景，我们必须等待灯光预计算的完成。如果Auto模式是打开的在Lighting 窗口，这会自动的发射。如果Auto模式没有被打开，我们需要手动的开始预计算通过操作Lighting 窗口（Window> Lighting）并且点击Build 按钮。

一旦这个过程已经完成，你将注意到场景中非静态的物体已经从光照贴图中读取并且更好的匹配场景中的光照。为了查看照明状态下的光照探针，取消选定Light Probe Group 在层级窗口中。

现在我们在我们的场景中设置了光照探针，我们在小的对象上得到间接光照的视觉效果，而不是花费创建额外的图表。

### 后记
自己学习翻译，本翻译仅供学习。
[原文](https://unity3d.com/cn/learn/tutorials/topics/graphics/probe-lighting?playlist=17102)